{"version":3,"sources":["../../../db/models/computer.js"],"names":["Sequelize","require","sequelize","host","dialect","define","timestamps","pool","max","min","acquire","idle","timezone","logging","User","ID","type","INTEGER","autoIncrement","primaryKey","rowFormat","OneSignalKey","UserID","references","model","key","STRING","hasMany","belongsTo","Setting","Name","MinFanSpeed","FLOAT","MaxFanSpeed","MinTemperature","MaxTemperature","MinPowerUsage","MaxPowerUsage","MinMemoryUsage","MaxMemoryUsage","Computer","isActiveNoti","BOOLEAN","defaultValue","indexes","unique","fields","GPU","STT","ComputerID","SeenDate","DATE","NOW","Fields","FanSpeed","Temperature","PowerUsage","MemoryUsage","Time","Status","GPUID","sync","force","then","module","exports"],"mappings":"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","file":"computer.js","sourcesContent":["const Sequelize = require('sequelize');\n\n// const sequelize = new Sequelize('vanlang', 'dev_nghia', 'nghiahoangdev@123', {\n//     host: '103.1.238.181',\n//     dialect: 'mysql',\n//     define: {\n//         timestamps: false // true by default\n//     },\n//     pool: {\n//         max: 5,\n//         min: 0,\n//         acquire: 30000,\n//         idle: 10000\n//     }\n// });\n\nconst sequelize = new Sequelize('minertracker', 'dev_nghia', 'nghiahoangdev@123', {\n    host: 'localhost',\n    dialect: 'mysql',\n    define: {\n        timestamps: false // true by default\n    },\n    pool: {\n        max: 10,\n        min: 0,\n        acquire: 30000,\n        idle: 60000\n    },\n    timezone: '+07:00',\n    logging: false\n});\n\nconst User = sequelize.define('User', {\n    ID: {\n        type: Sequelize.INTEGER,\n        autoIncrement: true,\n        primaryKey: true\n    }\n}, {\n    rowFormat: \"COMPRESSED\",\n});\n\nconst OneSignalKey = sequelize.define('OneSignalKey', {\n    UserID: {\n        type: Sequelize.INTEGER,\n        references: {\n            model: User,\n            key: 'ID'\n        }\n    },\n    OneSignalKey: Sequelize.STRING\n});\n\nUser.hasMany(OneSignalKey);\nOneSignalKey.belongsTo(User);\n\nconst Setting = sequelize.define('Setting', {\n    Name: {\n        type: Sequelize.STRING\n    },\n    MinFanSpeed: { type: Sequelize.FLOAT },\n    MaxFanSpeed: { type: Sequelize.FLOAT },\n    MinTemperature: { type: Sequelize.FLOAT },\n    MaxTemperature: { type: Sequelize.FLOAT },\n    MinPowerUsage: { type: Sequelize.FLOAT },\n    MaxPowerUsage: { type: Sequelize.FLOAT },\n    MinMemoryUsage: { type: Sequelize.FLOAT },\n    MaxMemoryUsage: { type: Sequelize.FLOAT },\n    UserID: {\n        type: Sequelize.INTEGER,\n        references: {\n            model: User,\n            key: 'ID'\n        }\n    }\n});\n\nUser.hasMany(Setting);\nSetting.belongsTo(User);\n\nconst Computer = sequelize.define('Computer', {\n    ID: {\n        type: Sequelize.INTEGER,\n        autoIncrement: true,\n        primaryKey: true\n    },\n    Name: {\n        type: Sequelize.STRING\n    },\n    isActiveNoti: {\n        type: Sequelize.BOOLEAN,\n        defaultValue: true\n    },\n    UserID: {\n        type: Sequelize.INTEGER,\n        references: {\n            model: User,\n            key: 'ID'\n        }\n    }\n}, {\n    rowFormat: \"COMPRESSED\",\n    indexes: [\n        {\n            unique: true,\n            fields: ['Name', 'UserID']\n        }]\n});\n\nUser.hasMany(Computer);\nComputer.belongsTo(User);\n\nconst GPU = sequelize.define('GPU', {\n    ID: {\n        type: Sequelize.INTEGER,\n        primaryKey: true,\n        autoIncrement: true\n    },\n    STT: {\n        type: Sequelize.INTEGER\n    },\n    Name: {\n        type: Sequelize.STRING,\n    },\n    ComputerID: {\n        type: Sequelize.INTEGER,\n        references: {\n            model: Computer,\n            key: 'ID'\n        }\n    },\n    SeenDate: { type: Sequelize.DATE, defaultValue: Sequelize.NOW }\n}, {\n    rowFormat: \"COMPRESSED\",\n    indexes: [\n        {\n            // unique: true,\n            fields: ['STT', 'ComputerID']\n        }\n    ]\n});\n\nComputer.hasMany(GPU);\nGPU.belongsTo(Computer);\n\nconst Fields = sequelize.define('Fields', {\n    ID: {\n        type: Sequelize.INTEGER,\n        primaryKey: true,\n        autoIncrement: true\n    },\n    FanSpeed: Sequelize.FLOAT,\n    Temperature: { type: Sequelize.FLOAT },\n    PowerUsage: { type: Sequelize.FLOAT },\n    MemoryUsage: { type: Sequelize.FLOAT },\n    Time: Sequelize.DATE,\n    Status: Sequelize.INTEGER,\n    GPUID: {\n        type: Sequelize.INTEGER,\n        references: {\n            model: GPU,\n            key: 'ID'\n        }\n    }\n}, {\n    rowFormat: \"COMPRESSED\",\n    indexes: [\n        {\n            fields: ['Time']\n        },\n        {\n            fields: ['GPUID', 'Time']\n        },\n        {\n            fields: ['GPUID', 'Time', 'Status']\n        },\n        {\n            fields: ['Status']\n        }\n    ]\n});\n\nGPU.hasMany(Fields);\nFields.belongsTo(GPU);\n\nUser.sync({ force: false }).then(() => {\n    OneSignalKey.sync({ force: false }).then(() => {\n\n    });\n\n    Computer.sync({ force: false}).then(() => {\n        GPU.sync({ force: false }).then(() => {\n            Fields.sync({ force: false }).then(() => {\n                Setting.sync({ force: false }).then(() => {\n\n                })\n            });\n        });\n    });\n});\n\n\n\nmodule.exports = {\n    Setting: Setting,\n    Computer: Computer,\n    GPU: GPU,\n    Fields: Fields,\n    User: User,\n    OneSignalKey,\n    sequelize: sequelize\n};"]}