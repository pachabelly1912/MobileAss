{"version":3,"sources":["../../routes/api.js"],"names":["GPU","findAll","then","gpus","g","seenTime","SeenDate","Computer","findOne","where","ID","ComputerID","c","isActiveNoti","unReadNoti","toString","gpu","cachedSettings","UserID","Name","Fields","count","Time","$gt","GPUID","$or","FanSpeed","$gte","MaxFanSpeed","$lte","MinFanSpeed","Temperature","MaxTemperature","MinTemperature","PowerUsage","MaxPowerUsage","MinPowerUsage","MemoryUsage","MaxMemoryUsage","MinMemoryUsage","loadNoti","usersToSend","Set","unRead","sequelize","query","replacements","gID","Number","type","QueryTypes","SELECT","userID","oneSignalPlayerId","oneSignalPlayerIds","add","console","log","size","sendNoti","Array","from","setTimeout","sendNotiIfNeed","timeToCheck","Date","now","userId","comIds","Object","values","computers","filter","map","length","comIdsStr","reduce","str","id","substr","cids","model","gpusToSend","cIds","mess","checkGpuHealth","destroy","value","res","minID","max","min","resetData","express","require","router","Router","db","User","OneSignalKey","Sequelize","Setting","socket","DEFAULT_SETTING","include","required","users","user","OneSignalKeys","k","coms","com","settings","st","post","req","next","body","comName","status","json","error","GPUs","u","save","computer","socketClient","payload","gpuFields","STT","isRadeon","indexOf","setting","bounds","fs","Status","push","emit","sendStatus","get","headers","comps","begin","limit","gid","params","statuses","statusQuery","split","s","parseInt","Op","lte","$in","order","fields","time","gId","cached","$ne","gpuId","attributes","fn","col","put","update","updateResult","oneSignalId","check","newOneSignalId","cachedSetting","updateResult2","delete","cId","deleteResult","computerID","gpuID","n_comId","requestResult","result","comId","isActive","e","newName","newname","oldName","name","module","exports"],"mappings":"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","file":"api.js","sourcesContent":["var express = require('express');\nvar router = express.Router();\nconst db = require('../db/models/computer');\nconst User = db.User;\nconst Computer = db.Computer;\nconst GPU = db.GPU;\nconst OneSignalKey = db.OneSignalKey;\nconst sequelize = db.sequelize;\nconst Fields = db.Fields;\nconst Sequelize = require('sequelize');\nconst Setting = db.Setting;\nconst sendNoti = require('../Notification/notification');\nconst socket = require('../socket/socket');\n\n//\n// let cached = {\n//     //\n// };\n\nlet unReadNoti = {\n\n};\n\nlet oneSignalPlayerIds = {\n\n};\n\nlet computers = {\n\n};\n\nlet cachedSettings = {\n\n};\n\nconst DEFAULT_SETTING = {\n    MinFanSpeed: 20,\n    MaxFanSpeed: 100,\n    MinTemperature: 40,\n    MaxTemperature: 102,\n    MinPowerUsage: 20,\n    MaxPowerUsage: 250,\n    MinMemoryUsage: null,\n    MaxMemoryUsage: null\n};\n\nUser.findAll({ include: [\n    { model: OneSignalKey, required: true }\n]\n}).then((users) => {\n    for (user of users) {\n        oneSignalPlayerIds[user.ID.toString()] = user.OneSignalKeys.map((k) => k.OneSignalKey);\n    }\n});\n\nComputer.findAll().then((coms) => {\n    for (com of coms) {\n        computers[com.ID.toString()] = com;\n    }\n});\n\nSetting.findAll().then(async (settings) => {\n    for (let st of settings) {\n        if (!cachedSettings[st.UserID.toString()]) {\n            cachedSettings[st.UserID.toString()] = {}\n        }\n        cachedSettings[st.UserID.toString()][st.Name] = st;\n    }\n\n    await loadNoti();\n});\n\nasync function loadNoti() {\n\n    GPU.findAll().then((gpus) => {\n        for (let g of gpus) {\n            //cached[g.ID.toString()] = ;\n\n            let seenTime = g.SeenDate;\n\n            Computer.findOne({ where: { ID: g.ComputerID }}).then((c) => {\n                if (!c.isActiveNoti) {\n                    unReadNoti[g.ID.toString()] = 0;\n                } else {\n                    let gpu = cachedSettings[c.UserID.toString()][g.Name];\n                    Fields.count({\n                        where: {\n                            Time: {\n                                $gt: seenTime\n                            },\n                            GPUID: g.GPUID,\n                            $or: [\n                                {\n                                    FanSpeed: {\n                                        $gte: gpu.MaxFanSpeed\n                                    }\n                                },\n                                {\n                                    FanSpeed: {\n                                        $lte: gpu.MinFanSpeed\n                                    }\n                                },\n                                {\n                                    Temperature: {\n                                        $gte: gpu.MaxTemperature\n                                    }\n                                },\n                                {\n                                    Temperature: {\n                                        $lte: gpu.MinTemperature\n                                    }\n                                },\n                                {\n                                    PowerUsage: {\n                                        $gte: gpu.MaxPowerUsage\n                                    }\n                                },\n                                {\n                                    PowerUsage: {\n                                        $lte: gpu.MinPowerUsage\n                                    }\n                                },\n                                {\n                                    MemoryUsage: {\n                                        $gte: gpu.MaxMemoryUsage\n                                    }\n                                },\n                                {\n                                    MemoryUsage: {\n                                        $lte: gpu.MinMemoryUsage\n                                    }\n                                }\n                            ]\n                        }\n                    }).then((c) => {\n                        unReadNoti[g.ID.toString()] = c;\n                    });\n                }\n            });\n        }\n    });\n}\n\nasync function sendNotiIfNeed() {\n    let usersToSend = new Set();\n    for (unRead in unReadNoti) {\n        if (unReadNoti[unRead]) {\n            try {\n                let userID = await sequelize.query('SELECT UserID from Computers c ' +\n                    'WHERE (SELECT COUNT(*) FROM GPUs g WHERE g.ID = :gID AND ComputerID = c.ID) = 1', {\n                    replacements: { gID: Number(unRead) }, type: sequelize.QueryTypes.SELECT\n                });\n\n                if (userID) {\n                    let oneSignalPlayerId = oneSignalPlayerIds[userID.toString()];\n                    usersToSend.add(oneSignalPlayerId);\n                }\n            } catch (e) {\n                console.log(e);\n            }\n        }\n    }\n    if (usersToSend.size) {\n        sendNoti('Một số máy tính có vấn đề, vui lòng kiểm tra lại', Array.from(usersToSend));\n    }\n    setTimeout(sendNotiIfNeed, 3600000);\n}\n\nsetTimeout(sendNotiIfNeed, 1000);\n\nasync function checkGpuHealth() {\n    let timeToCheck = new Date(Date.now() - 60 * 10 * 1000);\n    for (let userId in oneSignalPlayerIds) {\n        let comIds = Object.values(computers).filter((c) => {\n            return c.UserID === Number(userId)\n        }).map((c) => c.ID);\n\n        if (comIds.length === 0) {\n            continue;\n        }\n\n        let comIdsStr = comIds.reduce((str, id) => {\n            return str + id + ', '\n        }, '(');\n        comIdsStr = comIdsStr.substr(0, comIdsStr.length - 2) + ')';\n        let gpusToSend = await sequelize.query('SELECT * FROM GPUs g WHERE ComputerID IN ' + comIdsStr +\n            'AND (SELECT COUNT(*) FROM Fields WHERE GPUID = g.ID AND Time > :timeToCheck) = 0',\n            { replacements: { cids: comIds, timeToCheck: timeToCheck }, model: GPU })\n\n        if (gpusToSend.length) {\n            let cIds = new Set(gpusToSend.map(g => { return g.ComputerID }));\n            for (let id of Array.from(cIds)) {\n                let mess = 'Máy tính: ' + computers[id.toString()].Name + '\\n' + gpusToSend.filter(g => {\n                    return g.ComputerID === id\n                }).map(g => {\n                    return 'Card: ' + g.Name + '\\n'\n                }) + 'Không hoạt động trong một thời gian dài, làm ơn kiểm tra lại\\n\\n';\n                sendNoti(mess, oneSignalPlayerIds[userId]);\n            }\n        }\n    }\n}\n\nsetTimeout(checkGpuHealth, 900000);\n\nasync function resetData() {\n    //7200000\n    let res = await Fields.destroy({ where: { Time: { $lte: Date(Date().value - 24 * 3600 * 1000) } }});\n    console.log(`delete ${res}`);\n    let minID = await sequelize.query('SELECT MIN(ID) as min, MAX(ID) as max FROM Fields', {type: sequelize.QueryTypes.SELECT});\n    if (minID['min']) {\n        let max = minID['max'];\n        await sequelize.query('UPDATE Fields SET ID = ID - :minID + 1', { replacements: { minID: minID['min'] } });\n        await sequelize.query('ALTER TABLE Fields AUTO_INCREMENT = :max - :min + 2', { replacements: { max: max, min: minID['min'] } });\n    }\n\n    unReadNoti = {};\n    await loadNoti();\n    setTimeout(resetData, 6 * 3600 * 1000);\n}\n\nsetTimeout(resetData, 6 * 3600 * 1000);\n\nrouter.post('/fields', async (req, res, next) => {\n    const body = req.body;\n    const comName = body.ID;\n    const userId = body.User;\n\n    if (!userId || !comName) {\n        res.status(400).json({\n            error: 'missing User or id in body'\n        });\n        return;\n    }\n\n    const gpus = body.GPUs;\n\n    // let trans = await sequelize.transaction();\n    let u = await User.findOne({ where: { ID: userId }});\n    try {\n        if (!u) {\n            u = new User({ ID: userId });\n            // await u.save({ transaction: trans });\n            await u.save();\n            cachedSettings[u.ID.toString()] = {}\n        }\n        // await trans.commit();\n    } catch (e) {\n        // await trans.rollback();\n        res.status(400).json(e);\n        return;\n    }\n\n    let computer = await Computer.findOne({ where: { Name: comName, UserID: userId }});\n    if (!computer) {\n        computer = new Computer({ Name: comName, UserID: userId });\n        await computer.save();\n        computers[computer.ID.toString()] = computer;\n    }\n\n    let socketClient = socket[userId.toString()];\n    let payload = { };\n    if (socketClient) {\n        payload['ID'] = computer.ID;\n        payload['GPUs'] = [];\n    }\n\n    for (const gpuFields of gpus) {\n        // let trans = await sequelize.transaction();\n        let gpu = await GPU.findOne({ where: { STT: gpuFields.ID, ComputerID: computer.ID }});\n\n        try {\n            if (!gpu) {\n                gpu = new GPU({ STT: gpuFields.ID, Name: gpuFields.Name, ComputerID: computer.ID });\n                // await gpu.save({ transaction: trans });\n                await gpu.save();\n                unReadNoti[gpu.ID.toString()] = 0;\n\n                if (!cachedSettings[userId.toString()][gpuFields.Name]) {\n                    let isRadeon = gpuFields.Name.indexOf(\"Radeon\") !== -1;\n\n                    let setting = new Setting({\n                        UserID: userId,\n                        Name: gpuFields.Name,\n                        MinFanSpeed: DEFAULT_SETTING.MinFanSpeed,\n                        MaxFanSpeed: DEFAULT_SETTING.MaxFanSpeed,\n                        MinTemperature: DEFAULT_SETTING.MinTemperature,\n                        MaxTemperature: DEFAULT_SETTING.MaxTemperature,\n                        MinMemoryUsage: DEFAULT_SETTING.MinMemoryUsage,\n                        MaxMemoryUsage: DEFAULT_SETTING.MaxMemoryUsage,\n                        MinPowerUsage: isRadeon ? 0 : DEFAULT_SETTING.MinPowerUsage,\n                        MaxPowerUsage: DEFAULT_SETTING.MaxPowerUsage\n                    });\n                    cachedSettings[userId.toString()][gpuFields.Name] = setting;\n                    await setting.save();\n                }\n            }\n\n            // await trans.commit();\n        } catch (e) {\n            // await trans.rollback();\n            res.status(400).json(e);\n            return;\n        }\n\n        let status = 0;\n        let bounds = cachedSettings[userId.toString()][gpuFields.Name];\n        if (computers[gpu.ComputerID.toString()].isActiveNoti) {\n            if ((gpuFields.PowerUsage === 0 && gpu.Name.indexOf(\"Radeon\") === -1) || gpuFields.MemoryUsage === -1) {\n                status = -1;\n                if (unReadNoti[gpu.ID.toString()] === 0) {\n                    sendNoti('Máy tính: ' + computer.Name + '\\n' + 'Card: ' + gpu.Name + '\\n' + 'Không có tải', oneSignalPlayerIds[userId.toString()]);\n                }\n                unReadNoti[gpu.ID.toString()] += 1;\n            } else if ((bounds.MaxFanSpeed && gpuFields.FanSpeed > bounds.MaxFanSpeed) ||\n                (bounds.MinFanSpeed && gpuFields.FanSpeed < bounds.MinFanSpeed) ||\n                (bounds.MaxMemoryUsage && gpuFields.MemoryUsage > bounds.MaxMemoryUsage) ||\n                (bounds.MinMemoryUsage && gpuFields.MemoryUsage < bounds.MinMemoryUsage) ||\n                (bounds.MaxPowerUsage && gpuFields.PowerUsage > bounds.MaxPowerUsage) ||\n                (bounds.MinPowerUsage && gpuFields.PowerUsage < bounds.MinPowerUsage) ||\n                (bounds.MaxTemperature && gpuFields.Temperature > bounds.MaxTemperature) ||\n                (bounds.MinTemperature && gpuFields.Temperature < bounds.MinTemperature)) {\n                status = 1;\n\n                if (unReadNoti[gpu.ID.toString()] === 0) {\n                    sendNoti('Máy tính: ' + computer.Name + '\\n' + 'Card: ' + gpu.Name + '\\n' + 'Vượt quá định mức', oneSignalPlayerIds[userId.toString()]);\n                }\n                unReadNoti[gpu.ID.toString()] += 1;\n            }\n        }\n\n       const fs = new Fields({\n            FanSpeed: gpuFields.FanSpeed,\n            Temperature: gpuFields.Temperature,\n            PowerUsage: gpuFields.PowerUsage,\n            MemoryUsage: gpuFields.MemoryUsage,\n            Time: Date(),\n            Status: status,\n            GPUID: gpu.ID\n        });\n\n        try {\n            await fs.save();\n        } catch (e) {\n            res.status(400).json(e);\n            return\n        }\n\n        if (socketClient) {\n            payload.GPUs.push(fs);\n        }\n\n        if (socketClient) {\n            socketClient.emit('event', payload);\n        }\n    }\n\n    res.sendStatus(200);\n});\n\nrouter.get('/computers', async (req, res, next) => {\n    let user = req.headers.user;\n    if (!user) {\n        res.status(400).json({\n            error: 'missing user id'\n        });\n        return;\n    }\n\n    let comps = await Computer.findAll({\n        where: {\n          UserID: Number(user)\n        },\n        include: [ GPU ]\n    });\n\n    res.json(comps);\n});\n\n// router.get('/settings/computers/:cid/gpus/:gid', async (req, res, next) => {\n//     let body = req.body;\n//     let comId = req.params.cid;\n//     let gId = req.params.gid;\n//     let user = req.headers.user;\n//\n//     if (!comId || !gId || !user) {\n//         res.status(400).json({\n//             error: 'missing user id'\n//         });\n//         return;\n//     }\n//\n//     try {\n//         let gpu = await GPU.findOne({\n//             where: {\n//                 ID: gId, ComputerID: comId\n//             },\n//             attributes: ['MaxFanSpeed', 'MaxTemperature', 'MaxPowerUsage', 'MaxMemoryUsage',\n//                         'MinFanSpeed', 'MinTemperature', 'MinPowerUsage', 'MinMemoryUsage'\n//             ]\n//         });\n//         if (gpu) {\n//             res.json(gpu);\n//         } else {\n//             res.sendStatus(404);\n//         }\n//     } catch (e) {\n//         res.status(400).json(e);\n//     }\n// });\n//\n// router.put('/settings/computers/:cid/gpus/:gid', async (req, res, next) => {\n//    let body = req.body;\n//    let comId = req.params.cid;\n//    let gId = req.params.gid;\n//    let user = req.headers.user;\n//\n//    if (!comId || !gId || !user) {\n//        res.status(400).json({\n//            error: 'missing user id'\n//        });\n//        return;\n//    }\n//\n//    let computer = await Computer.findOne({ where: { ID: comId, UserID: Number(user) }});\n//    if (computer) {\n//        let gpus = await computer.getGPUs({ where: { ID: gId }});\n//        let gpu = gpus.pop();\n//\n//        if (gpu) {\n//            gpu.MaxFanSpeed = body.MaxFanSpeed;\n//            gpu.MaxTemperature = body.MaxTemperature;\n//            gpu.MaxPowerUsage = body.MaxPowerUsage;\n//            gpu.MaxMemoryUsage = body.MaxMemoryUsage;\n//            gpu.MinFanSpeed = body.MinFanSpeed;\n//            gpu.MinTemperature = body.MinTemperature;\n//            gpu.MinPowerUsage = body.MinPowerUsage;\n//            gpu.MinMemoryUsage = body.MinMemoryUsage;\n//            gpu.SeenDate = Date();\n//            try {\n//                await gpu.save();\n//                res.sendStatus(200);\n//            } catch (e) {\n//                res.sendStatus(400).json(e);\n//            }\n//            cached[gpu.ID.toString()] = gpu;\n//            unReadNoti[gpu.ID.toString()] = 0;\n//\n//        } else {\n//            res.sendStatus(404);\n//        }\n//    } else {\n//        res.sendStatus(404);\n//    }\n// });\n\n// router.get('/settings/global', async (req, res, next) => {\n//     let userId = req.headers.user;\n//\n//     if (!userId) {\n//         res.status(403).json('missing user in header');\n//         return;\n//     }\n//\n//     let user = await User.findOne({\n//         where: { ID: userId },\n//         attributes: ['MaxFanSpeed', 'MaxTemperature', 'MaxPowerUsage', 'MaxMemoryUsage',\n//             'MinFanSpeed', 'MinTemperature', 'MinPowerUsage', 'MinMemoryUsage'\n//         ]\n//     });\n//     if (!user) {\n//         res.sendStatus(404);\n//     }\n//\n//     res.json(user);\n// });\n//\n// router.put('/settings/global', async (req, res, next) => {\n//     let userId = req.headers.user;\n//     if(!userId) {\n//         res.status(403).json('missing user in header');\n//         return;\n//     }\n//\n//     let updateValues = req.body;\n//\n//     try {\n//         await User.update(updateValues, { where: { ID: userId }});\n//         res.sendStatus(200);\n//     } catch (e) {\n//         res.status(400).json(e);\n//     }\n// });\n\nrouter.get('/gpus/:gid/fields', async (req, res, next) => {\n    let begin = req.query['begin'];\n    let limit = req.query['limit'];\n    let gid = req.params.gid;\n\n    if (!begin || !limit) {\n        res.status(400).json({\n            error: 'missing begin || limit in query params'\n        });\n        return;\n    }\n\n    let statuses = [0, 1, -1];\n    let statusQuery = req.query['status'];\n    if (statusQuery) {\n        statuses = statusQuery.split(',').map((s) => parseInt(s));\n    }\n\n\n\n    let fields = await Fields.findAll({\n        where: {\n            ID: {\n                [Sequelize.Op.lte]: Number(begin)\n            },\n            GPUID: gid,\n            Status: {\n                $in: statuses\n            }\n        },\n        limit: Number(limit),\n        order: [[\"ID\",\"DESC\"]]\n    });\n\n    res.json(fields);\n});\n\nrouter.get('/gpus/:gid/fields/latest', async (req, res, next) => {\n    let time = new Date(Date.now() - 60 * 10 * 1000);\n    let gid = req.params.gid;\n    let fields = await Fields.findOne({ where: {\n            Time: {\n                $gte: time\n            },\n            GPUID: gid\n        }\n    });\n\n    res.json(fields);\n});\n\nrouter.get('/gpus/:gid/exceeds', async (req, res, next) => {\n    let user = req.headers.user;\n    if (!user) {\n        res.status(403).json({\n            error: 'missing user in header'\n        });\n        return;\n    }\n\n    let gId = req.params.gid;\n    let gpu = await GPU.findOne({ where: { ID: gId } });\n    if (!gpu) {\n        res.sendStatus(404);\n        return;\n    }\n    let seenTime = gpu.SeenDate;\n\n\n    let cached = cachedSettings[user][gpu.Name];\n    if (!cached) {\n        res.sendStatus(404);\n        return;\n    }\n\n    let count = await Fields.count({\n        where: {\n            Time: {\n                $gt: seenTime\n            },\n            Status: {\n                $ne: 0\n            },\n            GPUID: gId\n        }\n    });\n\n    res.json({\n        count: count\n    })\n});\n\nrouter.get('/gpus/:gid/fields/average', async (req, res, next) => {\n    let time = req.query['from'];\n    let user = req.headers.user;\n\n    let gpuId = req.params.gid;\n    let gpu = await GPU.findOne({ where: { ID: gpuId } });\n    if (!gpu) {\n        res.sendStatus(404);\n        return;\n    }\n\n    if (!user) {\n        res.status(403).json({\n            error: 'missing user in header'\n        });\n        return;\n    }\n\n    if (!time) {\n        time = 0;\n    } else {\n        time = Number(time);\n    }\n\n    time = new Date(time * 1000);\n\n    try {\n        let json = await Fields.findAll({\n            where: {\n                GPUID: gpuId,\n                Time: {\n                    $gt: time\n                }\n            },\n            attributes: [\n                [sequelize.fn('IFNULL', sequelize.fn('AVG', sequelize.col('FanSpeed')), 0), 'FanSpeed'],\n                [sequelize.fn('IFNULL', sequelize.fn('AVG', sequelize.col('Temperature')), 0), 'Temperature'],\n                [sequelize.fn('IFNULL', sequelize.fn('AVG', sequelize.col('PowerUsage')), 0), 'PowerUsage'],\n                [sequelize.fn('IFNULL', sequelize.fn('AVG', sequelize.col('MemoryUsage')), 0), 'MemoryUsage']\n            ]\n        });\n\n        if (cachedSettings[user][gpu.Name]) {\n            json[0]['dataValues']['exceeds'] = await Fields.count({\n                where: {\n                    Time: {\n                        $gt: time\n                    },\n                    Status: {\n                        $ne: 0\n                    },\n                    GPUID: gpuId\n                }\n            });\n        }\n\n        if (json) {\n            res.json(json);\n        } else {\n            res.sendStatus(404);\n        }\n    } catch (e) {\n        res.status(400).json(e);\n    }\n\n\n});\n\nrouter.put('/gpus/:gid/exceeds/seen', async (req, res, next) => {\n    let gpuId = req.params.gid;\n    let user = req.headers.user;\n\n    if (!user) {\n        res.status(403).json({\n            error: 'missing user in header'\n        });\n        return;\n    }\n\n    let updateResult = await GPU.update({\n                                            SeenDate: Date()\n                                        },{\n                                            where: {\n                                                ID: gpuId\n                                            }\n                                        });\n\n    if (updateResult === 0) {\n        res.sendStatus(404);\n        return;\n    } else {\n        let count = updateResult[0];\n        if (count === 1) {\n            res.sendStatus(200);\n\n            unReadNoti[gpuId.toString()] = 0;\n        } else {\n            res.sendStatus(404);\n        }\n    }\n\n});\n\nrouter.put('/notification/:id', async (req, res, next) => {\n    let user = req.headers.user;\n    let oneSignalId = req.params.id;\n    if (!user) {\n        res.status(403).json({\n            error: 'missing user in header'\n        });\n        return;\n    }\n\n    try {\n        let check = await OneSignalKey.count({ where: { OneSignalKey: oneSignalId } })\n        if (check === 0) {\n            let newOneSignalId = new OneSignalKey({ UserID: Number(user), OneSignalKey: oneSignalId });\n            await newOneSignalId.save();\n            res.sendStatus(200);\n\n            if (!oneSignalPlayerIds[user]) {\n                oneSignalPlayerIds[user] = []\n            }\n            oneSignalPlayerIds[user].push(oneSignalId);\n        } else {\n            res.sendStatus(200);\n        }\n    } catch (e) {\n        res.status(400).json(e);\n    }\n});\n\nrouter.get('/settings', async (req, res, next) => {\n    const user = req.headers.user;\n    if(!user) {\n        res.status(403).json({\n            error: 'missing user in header'\n        });\n        return;\n    }\n\n    try {\n        let settings = await Setting.findAll({ where: { UserID: Number(user) }});\n        res.json(settings);\n    } catch (e) {\n        res.status(400).json(e);\n    }\n});\n\nrouter.put('/settings/:gpu', async (req, res, next) => {\n    const user = req.headers.user;\n    if(!user) {\n        res.status(403).json({\n            error: 'missing user in header'\n        });\n        return;\n    }\n\n    let gpu = req.params.gpu;\n    try {\n        let updateResult = await Setting.update(req.body, { where: { UserID: Number(user), Name: gpu }});\n        if (updateResult.count === 0) {\n            res.sendStatus(404);\n            return;\n        }\n\n        cachedSettings[user][gpu].MaxFanSpeed = req.body.MaxFanSpeed;\n        cachedSettings[user][gpu].MinFanSpeed = req.body.MinFanSpeed;\n        cachedSettings[user][gpu].MaxTemperature = req.body.MaxTemperature;\n        cachedSettings[user][gpu].MinTemperature = req.body.MinTemperature;\n        cachedSettings[user][gpu].MaxPowerUsage = req.body.MaxPowerUsage;\n        cachedSettings[user][gpu].MinPowerUsage = req.body.MinPowerUsage;\n        cachedSettings[user][gpu].MaxMemoryUsage = req.body.MaxMemoryUsage;\n        cachedSettings[user][gpu].MinMemoryUsage = req.body.MinMemoryUsage;\n        let cachedSetting = cachedSettings[user][gpu];\n\n        let updateResult2 = await sequelize.query('UPDATE Fields SET Status = ' +\n            'IF(FanSpeed < :minf OR FanSpeed > :maxf ' +\n            'OR Temperature < :mint OR Temperature > :maxt ' +\n            'OR PowerUsage < :minp OR PowerUsage > :maxp ' +\n            'OR MemoryUsage < :minm OR MemoryUsage > :maxm, 1, 0) ' +\n            'WHERE GPUID IN ' +\n            '(SELECT ID FROM GPUs WHERE ComputerID IN ' +\n            '(SELECT ID FROM Computers WHERE UserID = :user)) AND Status != -1', {\n            replacements: {\n                'minf': cachedSetting.MinFanSpeed,\n                'maxf': cachedSetting.MaxFanSpeed,\n                'mint': cachedSetting.MinTemperature,\n                'maxt': cachedSetting.MaxTemperature,\n                'minp': cachedSetting.MinPowerUsage,\n                'maxp': cachedSetting.MaxPowerUsage,\n                'minm': cachedSetting.MinMemoryUsage,\n                'maxm': cachedSetting.MaxMemoryUsage,\n                'user': Number(user)\n            }\n        });\n\n        res.sendStatus(200);\n    } catch (e) {\n        res.status(400).json(e);\n    }\n});\n\nrouter.delete('/computers/:id', async (req, res, next) => {\n    let user = req.headers.user;\n    if (!user) {\n        res.status(403).json({\n           error: 'missing user in header'\n        });\n        return;\n    }\n    let cId = req.params.id;\n\n    let deleteResult = await Computer.destroy({ where: { UserID: Number(user), ID: cId } });\n    if (deleteResult.count === 0) {\n        res.sendStatus(404);\n    } else {\n        res.sendStatus(200);\n    }\n});\n\nrouter.delete('/computers/:cId/gpus/:gId', async (req, res, next) => {\n    let user = req.headers.user;\n    if (!user) {\n        res.status(403).json({\n            error: 'missing user in header'\n        });\n        return;\n    }\n\n    let computerID = req.params.cId;\n    let gpuID = req.params.gId;\n\n    let requestResult = await sequelize.query('DELETE FROM GPUs WHERE ComputerID = :cId AND ID = :id AND (SELECT COUNT(*) FROM Computers WHERE ID = :n_comId AND UserID = :userId) = 1;',\n        { replacements: { cId: computerID, id: gpuID, n_comId: computerID, userId: Number(user) }});\n\n    if (requestResult.count === 0) {\n        res.sendStatus(404);\n    } else {\n        res.sendStatus(200);\n    }\n});\n\nrouter.get('/gpus/health', async (req, res, next) => {\n    let user = req.headers.user;\n    if (!user) {\n        res.status(403).json({\n            error: 'missing user in header'\n        });\n        return;\n    }\n\n    let timeToCheck = new Date(Date.now() - 600000);\n\n    let result = await sequelize.query('SELECT ID, ' +\n        'IF((SELECT 1 FROM Fields WHERE GPUID = g.ID AND Time > :timeToCheck LIMIT 1) = 1, ' +\n        '(SELECT COUNT(*) FROM Fields WHERE GPUID = g.ID AND Time > g.SeenDate AND Status != 0), ' +\n        '-1) as health ' +\n        'FROM GPUs g WHERE g.ComputerID IN (SELECT ID FROM Computers WHERE UserID = :user)',\n        { replacements: { timeToCheck: timeToCheck, user: Number(user) }, type: sequelize.QueryTypes.SELECT});\n\n    res.json(result);\n});\n\nrouter.put('/computers/:id/active/:isActive', async (req, res, next) => {\n    let user = req.headers.user;\n    if (!user) {\n        res.status(403).json({\n            error: 'missing user in header'\n        });\n        return;\n    }\n\n    let comId = req.params.id;\n    let isActive = req.params.isActive;\n\n    try {\n        let updateResult = Computer.update({ isActiveNoti: isActive === \"true\" }, { where: { UserID: Number(user), ID: Number(comId) }})\n        if (updateResult.count === 0) {\n            res.sendStatus(404);\n        } else {\n            computers[comId].isActiveNoti = isActive === \"true\";\n            res.sendStatus(200);\n        }\n    } catch (e) {\n        res.status(400).json(e);\n    }\n});\n\nrouter.put('/computers/:name/new-name/:newname', async (req, res, next) => {\n   let user = req.headers.user;\n   if (!user) {\n       res.status(403).json({\n           error: 'missing user in header'\n       });\n       return;\n   }\n\n   let newName = req.params.newname;\n   let oldName = req.params.name;\n\n   try {\n       let count = await Computer.count({ where: { Name: newName, UserID: Number(user) } });\n       if (count !== 0) {\n           res.sendStatus(403);\n           return;\n       }\n       let result = await Computer.update({ Name: newName }, { where: { Name: oldName, UserID: Number(user) } });\n       if (result.count === 0) {\n           res.sendStatus(404);\n       } else {\n           res.sendStatus(200);\n\n           for (let computer in computers) {\n               if (computer.UserID === Number(user) && computer.Name === oldName) {\n                   computer.Name = newName;\n                   return;\n               }\n           }\n       }\n\n   } catch (e) {\n       res.status(400).json(e);\n   }\n});\n\n\nmodule.exports = router;\n"]}