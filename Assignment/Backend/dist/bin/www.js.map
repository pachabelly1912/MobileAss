{"version":3,"sources":["../../bin/www"],"names":["app","require","debug","http","port","normalizePort","process","env","PORT","set","server","createServer","socket","io","db","on","client","console","log","id","handshake","query","user","listen","onError","onListening","val","parseInt","isNaN","error","syscall","bind","code","exit","addr","address"],"mappings":";;AACA;;;;AAIA,IAAIA,MAAMC,QAAQ,QAAR,CAAV;AACA,IAAIC,QAAQD,QAAQ,OAAR,EAAiB,qBAAjB,CAAZ;AACA,IAAIE,OAAOF,QAAQ,MAAR,CAAX;;AAEA;;;;AAIA,IAAIG,OAAOC,cAAcC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,MAAlC,CAAX;AACAR,IAAIS,GAAJ,CAAQ,MAAR,EAAgBL,IAAhB;;AAEA;;;;AAIA,IAAIM,SAASP,KAAKQ,YAAL,CAAkBX,GAAlB,CAAb;AACA,IAAMY,SAASX,QAAQ,kBAAR,CAAf;AACA,IAAMY,KAAKZ,QAAQ,WAAR,EAAqBS,MAArB,CAAX;AACAE,OAAOC,EAAP,GAAYA,EAAZ;;AAEA,IAAMC,KAAKb,QAAQ,uBAAR,CAAX;;AAEAY,GAAGE,EAAH,CAAM,YAAN,EAAoB,UAASC,MAAT,EAAiB;AACjCC,UAAQC,GAAR,CAAY,SAAZ;AACA,MAAIC,KAAKH,OAAOI,SAAP,CAAiBC,KAAjB,CAAuBC,IAAhC;AACA,MAAI,CAACH,EAAL,EAAS;AACP;AACD;AACDP,SAAOO,EAAP,IAAaH,MAAb;;AAEA;AACA;AACA;AACH,CAXD;;AAaA;;;;AAIAN,OAAOa,MAAP,CAAcnB,IAAd;AACAM,OAAOK,EAAP,CAAU,OAAV,EAAmBS,OAAnB;AACAd,OAAOK,EAAP,CAAU,WAAV,EAAuBU,WAAvB;;AAEA;;;;AAIA,SAASpB,aAAT,CAAuBqB,GAAvB,EAA4B;AAC1B,MAAItB,OAAOuB,SAASD,GAAT,EAAc,EAAd,CAAX;;AAEA,MAAIE,MAAMxB,IAAN,CAAJ,EAAiB;AACf;AACA,WAAOsB,GAAP;AACD;;AAED,MAAItB,QAAQ,CAAZ,EAAe;AACb;AACA,WAAOA,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED;;;;AAIA,SAASoB,OAAT,CAAiBK,KAAjB,EAAwB;AACtB,MAAIA,MAAMC,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMD,KAAN;AACD;;AAED,MAAIE,OAAO,OAAO3B,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,IAFd;;AAIA;AACA,UAAQyB,MAAMG,IAAd;AACE,SAAK,QAAL;AACEf,cAAQY,KAAR,CAAcE,OAAO,+BAArB;AACAzB,cAAQ2B,IAAR,CAAa,CAAb;AACA;AACF,SAAK,YAAL;AACEhB,cAAQY,KAAR,CAAcE,OAAO,oBAArB;AACAzB,cAAQ2B,IAAR,CAAa,CAAb;AACA;AACF;AACE,YAAMJ,KAAN;AAVJ;AAYD;;AAED;;;;AAIA,SAASJ,WAAT,GAAuB;AACrB,MAAIS,OAAOxB,OAAOyB,OAAP,EAAX;AACA,MAAIJ,OAAO,OAAOG,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,KAAK9B,IAFnB;AAGAF,QAAM,kBAAkB6B,IAAxB;AACD","file":"www.js","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar app = require('../app');\nvar debug = require('debug')('minertracker:server');\nvar http = require('http');\n\n/**\n * Get port from environment and store in Express.\n */\n\nvar port = normalizePort(process.env.PORT || '8080');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nvar server = http.createServer(app);\nconst socket = require('../socket/socket');\nconst io = require('socket.io')(server);\nsocket.io = io;\n\nconst db = require('../db/models/computer');\n\nio.on('connection', function(client) {\n    console.log('connect');\n    let id = client.handshake.query.user;\n    if (!id) {\n      return;\n    }\n    socket[id] = client;\n\n    // client.on('disconnect', function(){\n    //     socket[id] = null;\n    // });\n});\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  var bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  var addr = server.address();\n  var bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n}\n"]}